apiService:
  image: berkeleyskypilot/skypilot-nightly:latest
  # Number of replicas to deploy - replicas > 1 is not well tested, and requires 
  # a PVC that supports ReadWriteMany (see accessMode in storage section below).
  replicas: 1
  preDeployHook: |-
    # Run commands before deploying the API server, e.g. installing an admin
    # policy. Remember to set the admin policy in the config section below.
    echo "Pre-deploy hook"
    
    # Uncomment the following lines to install the admin policy
    
    # echo "Installing admin policy"
    # pip install git+https://github.com/michaelvll/admin-policy-examples

  
  # Set config.yaml content on the API server
  config: null
  # config: |
  #   admin_policy: admin_policy_examples.AddLabelsPolicy
  #
  #   kubernetes:
  #     allowed_contexts:
  #       - gke_sky-dev-465_us-central1-c_skypilot-test-cluster
  #       - gke_sky-dev-465_us-central1-c_skypilot-test-cluster-2
  #
  #   jobs:
  #     controller:
  #       resources:
  #         cpus: 2+
  #
  #   allowed_clouds:
  #     - aws
  #     - kubernetes

  # Set resource requests and limits for the API server
  # TODO: Setting limits causes issues with the API server. For now we advise
  # not to set limits.
  resources: null
  # resources:
  #   requests:
  #     cpu: "1"
  #     memory: "2Gi"
  #   limits:
  #     cpu: "2"
  #     memory: "4Gi"
  #     # Additional resource types like ephemeral-storage can be specified here
  
  # [Internal] Enable developer mode for SkyPilot
  skypilotDev: false

storage:
  # Enable/disable persistent storage
  enabled: true
  # Storage class name - leave empty to use cluster default
  storageClassName: ""
  # Access modes - ReadWriteOnce or ReadWriteMany depending on what is supported by the storage class
  accessMode: ReadWriteOnce
  # Storage size
  size: 10Gi
  # Optional selector for matching specific PVs
  selector: {}
    # matchLabels:
    #   environment: prod
  # Optional volume name for binding to specific PV
  volumeName: ""
  # Optional annotations
  annotations: {}


ingress:
  enabled: true
  # Name of the secret containing basic auth credentials for ingress. If not specified, a new secret will be created using authCredentials
  authSecret: null
  # Basic auth credentials in format "username:encrypted_password" (only used if ingress.authSecret is not set)
  authCredentials: "username:$apr1$encrypted_password"
  # The base path of API server, you may use differenet path to expose multiple API server through a unified ingress-controller
  path: '/'

  # TODO(aylei): remove the following fields before v0.11.0 release
  # TODO(aylei): document the migration steps in release note.
  # This is a break change for users in v0.8.0 nightly. If user does not specify ingress.nodePortEnabled explicitly,
  # helm upgrade will delete the existing NodePort service and change the ingress controller service to LoadBalancer. The endpoint
  # of API server will be changed consequently.

  # Create a NodePort service for the ingress controller
  # Note: nodePort svc will only be created when both ingress.nodePortEnabled=true AND ingress-nginx.enabled=true
  # Deprecated: use ingress-nginx.controller.service.type=NodePort instead
  nodePortEnabled: false
  # Specific nodePort to use for the ingress controller
  # If not set, Kubernetes will assign random ports in the NodePort range (default 30000-32767)
  # Deprecated: use ingress-nginx.controller.service.nodePorts.http instead
  httpNodePort: 30050 # Set to null to automatically assign a random port
  # Deprecated: use ingress-nginx.controller.service.nodePorts.https instead
  httpsNodePort: 30051 # Set to null to automatically assign a random port

ingress-nginx:
  enabled: true
  controller:
    service:
      type: LoadBalancer
      # Default annotations for the ingress controller service. We want an L4 loadbalancer by default for maximum compatibility,
      # especially for websocket SSH tunneling. To achieve this, different cloud providers and kubernetes versions require different
      # annotations. Annotations with no side effects are aggregated below to simplify the usage. Users with more complex networking
      # setup should customize the annotations directly.
      annotations:
        # For EKS with AWS Load Balancer Controller prior to v2.5.0, this annitation is needed to bypass the legacy cloud controller manager.
        # Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.11/guide/service/annotations/#legacy-cloud-provider
        service.beta.kubernetes.io/aws-load-balancer-type: "external"
        # For GKE, use backend service-based external passthrough Network Load Balancer as per best practices.
        # Ref: https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer#load_balancer_types
        cloud.google.com/l4-rbs: "enabled"
    config:
      http-snippet: |
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

rbac:
  # Configure the RBAC permissions for the SkyPilot API server
  rules:
    # Default configuration with full access - override for restricted environments
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]

kubernetesCredentials:
  # Enable/disable using the API server's cluster for workloads
  useApiServerCluster: true
  # Use the `kube-credentials` secret containing the kubeconfig to authenticate to Kubernetes
  useKubeconfig: false
  # Name of the secret containing the kubeconfig file. Only used if useKubeconfig is true.
  kubeconfigSecretName: kube-credentials
  # Namespace to use for in-cluster resources
  inclusterNamespace: null

awsCredentials:
  enabled: false

gcpCredentials:
  enabled: false
  # TODO(romilb): This can be made optional by using the project in the key json by default.
  projectId: null
